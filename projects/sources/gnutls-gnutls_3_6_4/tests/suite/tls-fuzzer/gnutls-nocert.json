[
    {"server_command": ["@SERVER@", "--http",
                 "--x509keyfile", "tests/serverX509Key.pem",
                 "--x509certfile", "tests/serverX509Cert.pem",
                 "--x509keyfile", "../../../certs/ecc256.pem",
                 "--x509certfile", "../../../certs/cert-ecc256.pem",
                 "--debug=3",
                 "--noticket",
                 "--priority=@PRIORITY@",
                 "--disable-client-cert", "--port=@PORT@"],
     "tests" : [
         {"name" : "test-fuzzed-plaintext.py"},
         {"name" : "test-large-hello.py",
          "arguments" : [
          "two ext, #80 61384 bytes",
          "two ext, #80 12276 bytes",
          "ciphers even 8199",
          "ciphers odd 8090",
          "ext padding, 16130 bytes",
          "ext padding, 65367 bytes",
          "multiple extensions 9212",
          "multiple extensions 1",
          "multiple extensions 16353",
          "sanity check - fragmented",
          "fragmented, padding ext 0 bytes",
          "fragmented, padding ext 65354 bytes",
          "fragmented, padding ext 16213 bytes"]},
         {"name" : "test-ecdsa-sig-flexibility.py"},
         {"name" : "test-ocsp-stapling.py",
          "arguments" : ["--no-status"] },
         {"name" : "test-encrypt-then-mac-renegotiation.py",
          "comment" : "we are not strict in EtM required behavior in renegotiation",
          "arguments" : ["-e", "Encrypt-then-MAC renegotiation crash"]},
         {"name" : "test-x25519.py",
          "comment" : "x448 is not supported",
          "arguments" : ["-e", "all zero x448 key share",
          "-e", "empty x448 key share",
          "-e", "sanity - negotiate x448",
          "-e", "too big x448 key share",
          "-e", "too small x448 key share",
          "-e", "x448 key share of \"1\""
          ]},
         {"name" : "test-cve-2016-7054.py",
          "arguments" : ["-e", "sanity"]},
         {"name" : "test-cve-2016-6309.py"},
         {"name" : "test-invalid-server-name-extension.py",
          "comment" : "we don't parse past the first valid name, and we don't validate input received",
          "arguments" : ["-e", "SNI name with UTF-8",
          "-e", "multiple host_names in SNI, RFC 6066 compliance",
          "-e", "incorrect SNI"]},
         {"name" : "test-invalid-server-name-extension-resumption.py",
          "comment" : "we don't follow the RFC precisely on SNI resumption, we cache the SNI and ignore the extensions",
          "arguments" : ["-e", "Sanity check, bad SNI",
          "-e", "session resume with different SNI",
          "-e", "session resume with malformed SNI"]},
         {"name" : "test-chacha20.py"},
         {"name" : "test-aes-gcm-nonces.py" },
         {"name" : "test-atypical-padding.py" },
         {"name" : "test-bleichenbacher-workaround.py",
          "arguments" : ["-n", "20"]
         },
         {"name" : "test-clienthello-md5.py"},
         {"name" : "test-client-compatibility.py",
          "arguments" : ["-e", "18: IE 6 on XP",
                         "-e", "52: YandexBot 3.0 on unknown",
                         "-e", "100: IE 6 on XP"]},
         {"name" : "test-conversation.py"},
	 {"name" : "test-client-hello-max-size.py",
	  "comment" : "FIXME: we fail with: Handshake buffer length is 131400 (max: 131072)",
	  "arguments" : ["-e", "max client hello"]},
	 {"name" : "test-atypical-padding.py" },
	 {"name" : "test-ffdhe-negotiation.py" ,
	  "comment" : ["we don't prefer DHE over RSA if RSA is preferred by peer"],
	  "arguments" : ["-e", "Check if DHE preferred"]},
         {"name" : "test-cve-2016-2107.py"},
         {"name" : "test-dhe-rsa-key-exchange.py"},
         {"name" : "test-dhe-rsa-key-exchange-signatures.py",
          "comment" : "gnutls no longer allows sha224",
          "arguments" : ["-e", "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA sha224 signature",
                         "-e", "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 sha224 signature",
                         "-e", "TLS_DHE_RSA_WITH_AES_128_CBC_SHA sha224 signature",
                         "-e", "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 sha224 signature",
                         "-e", "TLS_DHE_RSA_WITH_AES_256_CBC_SHA sha224 signature"]
         },
         {"name" : "test-dhe-rsa-key-exchange-with-bad-messages.py"},
         {"name" : "test-early-application-data.py"},
         {"name" : "test-ecdhe-rsa-key-exchange.py"},
         {"name" : "test-ecdhe-rsa-key-exchange-with-bad-messages.py"},
         {"name" : "test-empty-extensions.py"},
         {"name" : "test-export-ciphers-rejected.py"},
         {"name" : "test-extensions.py"},
         {"name" : "test-extended-master-secret-extension.py",
          "comment" : "gnutls does not allow switching from EMS to no EMS, and w/ECDHE test is incomplete",
          "arguments" : ["-e", "renegotiate without EMS in session with EMS",
                         "-e", "EMS with session resume without extension"]},
         {"name" : "test-fallback-scsv.py",
          "arguments" : ["--tls-1.3"]},
         {"name" : "test-fuzzed-ciphertext.py"},
         {"name" : "test-fuzzed-finished.py"},
         {"name" : "test-fuzzed-MAC.py"},
         {"name" : "test-fuzzed-padding.py"},
         {"name" : "test-hello-request-by-client.py"},
         {"name" : "test-interleaved-application-data-and-fragmented-handshakes-in-renegotiation.py",
          "comment" : "gnutls doesn't support interleaved data with handshake",
          "exp_pass" : false},
         {"name" : "test-interleaved-application-data-in-renegotiation.py",
          "comment" : "gnutls doesn't support interleaved data with handshake",
          "exp_pass" : false},
         {"name" : "test-invalid-cipher-suites.py"},
         {"name" : "test-invalid-client-hello.py"},
         {"name" : "test-invalid-client-hello-w-record-overflow.py"},
         {"name" : "test-invalid-compression-methods.py"},
         {"name" : "test-invalid-content-type.py"},
         {"name" : "test-invalid-rsa-key-exchange-messages.py"},
         {"name" : "test-invalid-session-id.py"},
         {"name" : "test-invalid-version.py"},
         {"name" : "test-large-number-of-extensions.py"},
         {"name" : "test-message-duplication.py"},
         {"name" : "test-message-skipping.py"},
         {"name" : "test-ocsp-stapling.py",
          "comment" : "test requires OCSP setup",
          "exp_pass" : false},
         {"name" : "test-openssl-3712.py",
          "comment" : "gnutls doesn't support interleaved data with handshake",
          "exp_pass" : false},
         {"name" : "test-record-layer-fragmentation.py",
          "comment" : "These tests rely on fragmenting the first bytes of the handshake header. Gnutls is limited on that, and doesn't accept handshake header fragmentation.",
          "arguments" : ["-e", "non fragmented, over fragmentation limit: 65535 fragment - 16332B extension",
                         "-e", "small, maximum fragmentation: 1 fragment - 20B extension",
                         "-e", "medium, maximum fragmentation: 1 fragment - 1024B extension"]},
         {"name" : "test-sessionID-resumption.py"},
         {"name" : "test-sig-algs.py"
         },
         {"name" : "test-signature-algorithms.py",
          "comment" : "gnutls doesn't tolerate that much",
          "arguments" : ["-e", "tolerance max (32764) number of methods"]
         },
         {"name" : "test-sslv2-connection.py"},
         {"name" : "test-sslv2-force-cipher-3des.py"},
         {"name" : "test-sslv2-force-cipher-non3des.py"},
         {"name" : "test-sslv2-force-cipher.py"},
         {"name" : "test-sslv2-force-export-cipher.py"},
         {"name" : "test-sslv2hello-protocol.py"},
         {"name" : "test-TLSv1_2-rejected-without-TLSv1_2.py"},
         {"name" : "test-truncating-of-client-hello.py" },
         {"name" : "test-truncating-of-finished.py"},
         {"name" : "test-truncating-of-kRSA-client-key-exchange.py"},
         {"name" : "test-unsupported-curve-fallback.py"},
         {"name" : "test-version-numbers.py"},
         {"name" : "test-zero-length-data.py"}
     ]
    }
]
